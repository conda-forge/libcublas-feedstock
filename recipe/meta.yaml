{% set name = "libcublas" %}
{% set version = "12.0.1.189" %}
{% set cuda_version = "12.0" %}
{% set platform = "linux-x86_64" %}  # [linux64]
{% set platform = "linux-ppc64le" %}  # [ppc64le]
{% set platform = "linux-sbsa" %}  # [aarch64]
{% set platform = "windows-x86_64" %}  # [win]
{% set target_name = "x86_64-linux" %}  # [linux64]
{% set target_name = "ppc64le-linux" %}  # [ppc64le]
{% set target_name = "sbsa-linux" %}  # [aarch64]
{% set target_name = "x64" %}  # [win]
{% set extension = "tar.xz" %}  # [not win]
{% set extension = "zip" %}  # [win]

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://developer.download.nvidia.com/compute/cuda/redist/{{ name }}/{{ platform }}/{{ name }}-{{ platform }}-{{ version }}-archive.{{ extension }}
  sha256: 38272cc9184b4a57a6250fc2cd914ffc827f9f8cd5a3e1356bc3c31f843caf8f  # [linux64]
  sha256: 2d46e735f8e76e2eb7df1b4f41d56aa8d5d2683f99988bac82d6ae33fb6d344b  # [ppc64le]
  sha256: 96b68f6821684f39f338862639ce74a74c75830bf44dcd17ef372a1cb8c2304d  # [aarch64]
  sha256: 88f29bec81880844da2eee13f1cdc51e1ccd8b4c60af6df633577810b30f80d0  # [win]

build:
  number: 0
  skip: true  # [osx]

outputs:
  - name: libcublas
    files:
      - lib/lib*blas*.so.*                            # [linux]
      - targets/{{ target_name }}/lib/lib*blas*.so.*  # [linux]
      - Library\bin\cublas*.dll                       # [win]
      - Library\bin\nvblas*.dll                       # [win]
    requirements:
      build:
        - {{ compiler("c") }}
        - {{ compiler("cxx") }}
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
        - sysroot_{{ target_platform }} 2.17    # [linux]
      host:
         - cuda-version {{ cuda_version }}
      run:
         - {{ pin_compatible("cuda-version", max_pin="x.x") }}
      run_constrained:
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
    test:
      commands:
        - test -L $PREFIX/lib/libcublas.so.{{ version }}                                          # [linux]
        - test -L $PREFIX/lib/libcublas.so.{{ version.split(".")[0] }}                            # [linux]
        - test -L $PREFIX/targets/{{ target_name }}/lib/libcublas.so.{{ version }}                # [linux]
        - test -f $PREFIX/targets/{{ target_name }}/lib/libcublas.so.{{ version.split(".")[0] }}  # [linux]
        - if not exist %LIBRARY_BIN%\cublas64_{{ version.split(".")[0] }}.dll exit 1              # [win]
        - if not exist %LIBRARY_BIN%\cublasLt64_{{ version.split(".")[0] }}.dll exit 1            # [win]
        - if not exist %LIBRARY_BIN%\nvblas64_{{ version.split(".")[0] }}.dll exit 1              # [win]
    about:
      home: https://developer.nvidia.com/cublas
      license: LicenseRef-NVIDIA-End-User-License-Agreement
      license_file: LICENSE
      license_url: https://docs.nvidia.com/cuda/eula/index.html
      summary: An implementation of BLAS (Basic Linear Algebra Subprograms) on top of the NVIDIA CUDA runtime.
      description: |
        The cuBLAS Library provides a GPU-accelerated implementation of the basic linear algebra subroutines (BLAS).
      doc_url: https://docs.nvidia.com/cuda/cublas/

  - name: libcublas-dev
    build:
      run_exports:
        - {{ pin_subpackage("libcublas", max_pin="x") }}
    files:
      - lib/lib*blas*.so                            # [linux]
      - lib/pkgconfig                               # [linux]
      - targets/{{ target_name }}/include           # [linux]
      - targets/{{ target_name }}/lib/lib*blas*.so  # [linux]
      - targets/{{ target_name }}/lib/stubs         # [linux]
      # Not shipping Fortran bindings (in src) on Windows for now
      - targets/{{ target_name }}/libcublas/src     # [linux and not aarch64]
      - Library\include                             # [win]
      - Library\lib                                 # [win]
    requirements:
      build:
        - {{ compiler("c") }}
        - {{ compiler("cxx") }}
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
        - sysroot_{{ target_platform }} 2.17    # [linux]
      host:
        - cuda-version {{ cuda_version }}
      run:
        - {{ pin_compatible("cuda-version", max_pin="x.x") }}
        - {{ pin_subpackage("libcublas", exact=True) }}
      run_constrained:
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
        - libcublas-static >={{ version }}      # [linux]
    test:
      commands:
        - test -L $PREFIX/lib/libcublas.so                                    # [linux]
        - test -L $PREFIX/lib/libcublasLt.so                                  # [linux]
        - test -L $PREFIX/lib/libnvblas.so                                    # [linux]
        - test -f $PREFIX/lib/pkgconfig/cublas*.pc                            # [linux]
        - test -f $PREFIX/targets/{{ target_name }}/include/cublas.h          # [linux]
        - test -f $PREFIX/targets/{{ target_name }}/include/cublasLt.h        # [linux]
        - test -f $PREFIX/targets/{{ target_name }}/include/nvblas.h          # [linux]
        - test -L $PREFIX/targets/{{ target_name }}/lib/libcublas.so          # [linux]
        - test -L $PREFIX/targets/{{ target_name }}/lib/libcublasLt.so        # [linux]
        - test -L $PREFIX/targets/{{ target_name }}/lib/libnvblas.so          # [linux]
        - test -f $PREFIX/targets/{{ target_name }}/lib/stubs/libcublas.so    # [linux]
        - test -f $PREFIX/targets/{{ target_name }}/lib/stubs/libcublasLt.so  # [linux]
        - test -f $PREFIX/targets/{{ target_name }}/libcublas/src/fortran.c   # [linux and not aarch64]
        - test -f $PREFIX/targets/{{ target_name }}/libcublas/src/fortran.h   # [linux and not aarch64]
        - if not exist %LIBRARY_INC%\cublas.h exit 1                          # [win]
        - if not exist %LIBRARY_INC%\cublasLt.h exit 1                        # [win]
        - if not exist %LIBRARY_INC%\nvblas.h exit 1                          # [win]
        - if not exist %LIBRARY_LIB%\cublas.lib exit 1                        # [win]
        - if not exist %LIBRARY_LIB%\cublasLt.lib exit 1                      # [win]
        - if not exist %LIBRARY_LIB%\nvblas.lib exit 1                        # [win]
    about:
      home: https://developer.nvidia.com/cublas
      license: LicenseRef-NVIDIA-End-User-License-Agreement
      license_file: LICENSE
      license_url: https://docs.nvidia.com/cuda/eula/index.html
      summary: An implementation of BLAS (Basic Linear Algebra Subprograms) on top of the NVIDIA CUDA runtime.
      description: |
        The cuBLAS Library provides a GPU-accelerated implementation of the basic linear algebra subroutines (BLAS).
      doc_url: https://docs.nvidia.com/cuda/cublas/

  - name: libcublas-static
    build:
      skip: True  # [not linux]
    files:
      - targets/{{ target_name }}/lib/lib*blas*_static.a
    requirements:
      build:
        - {{ compiler("c") }}
        - {{ compiler("cxx") }}
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
        - sysroot_{{ target_platform }} 2.17    # [linux]
      host:
        - cuda-version {{ cuda_version }}
      run:
        - {{ pin_compatible("cuda-version", max_pin="x.x") }}
      run_constrained:
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
    test:
      commands:
        - test -f $PREFIX/targets/{{ target_name }}/lib/libcublas_static.a
        - test -f $PREFIX/targets/{{ target_name }}/lib/libcublasLt_static.a
    about:
      home: https://developer.nvidia.com/cublas
      license: LicenseRef-NVIDIA-End-User-License-Agreement
      license_file: LICENSE
      license_url: https://docs.nvidia.com/cuda/eula/index.html
      summary: An implementation of BLAS (Basic Linear Algebra Subprograms) on top of the NVIDIA CUDA runtime.
      description: |
        The cuBLAS Library provides a GPU-accelerated implementation of the basic linear algebra subroutines (BLAS).
      doc_url: https://docs.nvidia.com/cuda/cublas/

about:
  home: https://developer.nvidia.com/cublas
  license: LicenseRef-NVIDIA-End-User-License-Agreement
  license_file: LICENSE
  license_url: https://docs.nvidia.com/cuda/eula/index.html
  summary: An implementation of BLAS (Basic Linear Algebra Subprograms) on top of the NVIDIA CUDA runtime.
  description: |
    The cuBLAS Library provides a GPU-accelerated implementation of the basic linear algebra subroutines (BLAS).
  doc_url: https://docs.nvidia.com/cuda/cublas/

extra:
  recipe-maintainers:
    - adibbley
